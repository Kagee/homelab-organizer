[project]
name = "homelab-organizer"
version = "0.2023.2"
description = "Web app for organizing stuff in your homelab"
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE"}
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Environment :: Web Environment",
  "Environment :: Console",
  "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
  "Framework :: Django :: 3.2"
]

[project.urls]
repository = "https://gitlab.com/Kagee/homelab-organizer.git"

[tool.mypy]
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "hlo.settings"

# https://www.codeac.io/documentation/pylint-configuration.html

[tool.pylint.'MAIN']
extension-pkg-allow-list = [
  "lxml",
]
load-plugins = "pylint_django"
py-version = "3.9"

[tool.pyright]
# This makes pyright not mark code behind thinks like
# os.name != "nt" as unreacable.
pythonPlatform = ""

[tool.pylint.'MESSAGES CONTROL']
# Please do not use this as an
# indicator as to my feeling
# towards documentation...
disable = [
  "missing-function-docstring",
  "missing-module-docstring",
  "missing-class-docstring",
]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO", "NOTE"]

[tool.pylint."django foreign keys referenced by strings"]
# A module containing Django settings to be used while linting.
django-settings-module = "hlo.settings"

[tool.black]
line-length = 80
target-version = ['py310']
experimental-string-processing = true
preview = true

[tool.ruff]
line-length = 80
indent-width = 4
target-version = "py310"
#select = ["E4", "E7", "E9", "F"]
#select = ["E", "F", "W", "I", "B"]
select = ["ALL"]
ignore = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D106", # Missing docstring in public nested class
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "ANN", # Annotations
  ]

fixable = ["ALL"]

#[tool.ruff.lint]
#select = ["D"]

#[tool.ruff.lint.pydocstyle]
#convention = "google"