#   _           _ _     _
#  | |__  _   _(_) | __| | ___ _ __
#  | '_ \| | | | | |/ _` |/ _ \ '__|
#  | |_) | |_| | | | (_| |  __/ |
#  |_.__/ \__,_|_|_|\__,_|\___|_|
#

FROM docker.io/library/python:3.13-bullseye AS builder
ARG DEBUG_BUILD=true
ENV DEBUG_BUILD=$DEBUG_BUILD

# Set the working directory inside the container
WORKDIR /app

# Prevents Python from writing pyc files to disk
ENV PYTHONDONTWRITEBYTECODE=1
#Prevents Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED=1

# Create a venv that we can copy after building
RUN python3 -m venv .venv

# Use python binaries from venv
ENV PATH="/app/.venv/bin:$PATH"

# Upgrade pip
RUN pip install --upgrade pip

# Copy the Django project requirements
COPY requirements.txt requirements-dev.txt  /app/

# Copy just what we need for a running into /app
COPY hlo /app/hlo
COPY static /app/static
COPY manage.py LICENSE pyproject.toml package.json waitserver.py /app/
COPY container/copy_django_bootstrap_icons.sh /copy_django_bootstrap_icons.sh


# Install all dependencies
RUN if $DEBUG_BUILD; then \
        pip install --no-cache-dir -r requirements-dev.txt; \
    else \
        pip install --no-cache-dir -r requirements.txt; \
    fi

RUN apt-get update && \
        apt-get install \
            --assume-yes\
            --no-install-recommends \
            npm \
            gosu \
            figlet

# Here we have a copy of everyting, including .git
COPY .git /repo/.git

RUN cd /repo; \
    if $DEBUG_BUILD; then \
      figlet DEBUG > /app/buildinfo; \
    else \
      figlet PROD > /app/buildinfo; \
    fi; \
    date --iso=m >> /app/buildinfo; \
    git describe --all --dirty=-dirty --long >> /app/buildinfo; \
    cat /app/buildinfo;

# Install (download) JS deps to ./node_modules
RUN npm install .

# Convert all soft symlinks in static to hard symlinks (js and css from node_modules)
RUN find /app/static -type l -exec bash -c 'ln -f "$(readlink -m "$0")" "$0"' {} \;

COPY container/copy_django_bootstrap_icons.sh /copy_django_bootstrap_icons.sh
RUN /copy_django_bootstrap_icons.sh

# Remove the resto of the node data, as we now don't need it anymore
RUN rm -r ./node_modules ./package.json

#      _    ____  ____
#     / \  |  _ \|  _ \
#    / _ \ | |_) | |_) |
#   / ___ \|  __/|  __/
#  /_/   \_\_|   |_|
#


FROM docker.io/library/python:3.13-slim-bullseye AS app

ARG DEBUG_BUILD=false
ARG CI_COMMIT_SHORT_SHA="dev"
ENV CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
ENV DEBUG_BUILD=$DEBUG_BUILD

# Prevents Python from writing pyc files to disk
ENV PYTHONDONTWRITEBYTECODE=1
#Prevents Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED=1

# Copy venv, app code, static files etc from builder
COPY --from=builder --chown=1000:1000 /app /app
COPY --from=builder --chown=0:0 /usr/sbin/gosu /usr/sbin/gosu


ENV DEBIAN_FRONTEND=noninteractive

# To install /usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf
# Consider installing it in builder and copy
RUN apt-get update && \
    apt-get -y install \
    --no-install-recommends fonts-dejavu && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# if dev apt install --no-install-recommends wkhtmltopdf

WORKDIR /app

RUN cat /app/buildinfo; cp /app/buildinfo /app/hlo/templates/common/buildinfo.txt; \
      echo $CI_COMMIT_SHORT_SHA > /app/hlo/templates/common/image_commit_short_sha.txt; \
      date --iso=m > /app/hlo/templates/common/image_build_timestamp.txt;

ENV HLO_STATIC_ROOT=/app/static_root
ENV HLO_MEDIA_ROOT=/app/media_root
ENV HLO_SQLITE3_FILE=/app/db/hlo.sqlite3
ENV HLO_WHOOSH_INDEX=/app/whoosh_index
ENV HLO_BS_ICONS_BASE_PATH="$HLO_STATIC_ROOT/django_bootstrap_icons/bs_icon/"
ENV HLO_MD_ICONS_BASE_PATH="$HLO_STATIC_ROOT/django_bootstrap_icons/md_icon/"

# Use python binaries from venv
ENV PATH="/app/.venv/bin:$PATH"

# Temporarily set some ENV vars that is required
# for manage.py check to work
# this creates /tmp/django_cache owned by root :/
RUN export \
    HLO_SECRET_KEY=no-so-secret-key-used-for-testing \
    HLO_CSRF_TRUSTED_ORIGINS='https://*' \
    HLO_REMOTE_USER_HEADER=none; \
    python3 manage.py check && rm -r /tmp/*

# Do this late to ease development
COPY container/entrypoint.sh /entrypoint.sh

RUN cat /app/buildinfo

# static_root is the static output directory
VOLUME /app/static_root /app/db /app/media_root /app/whoosh_index
EXPOSE 8000

ENTRYPOINT [ "/entrypoint.sh" ]
